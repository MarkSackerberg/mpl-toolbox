{
  "version": "0.0.1",
  "name": "candy_guard",
  "instructions": [
    {
      "name": "initialize",
      "docs": [
        "Create a new candy guard account."
      ],
      "accounts": [
        {
          "name": "candyGuard",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "base",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "data",
          "type": {
            "defined": "CandyGuardData"
          }
        }
      ]
    },
    {
      "name": "mint",
      "docs": [
        "Mint an NFT from a candy machine wrapped in the candy guard."
      ],
      "accounts": [
        {
          "name": "candyGuard",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "candyMachineProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "candyMachine",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "candyMachineAuthorityPda",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "nftMintAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "nftMasterEdition",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "collectionAuthorityRecord",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "collectionMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "collectionMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "collectionMasterEdition",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "collectionUpdateAuthority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "recentSlothashes",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructionSysvarAccount",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "mintArgs",
          "type": "bytes"
        },
        {
          "name": "label",
          "type": {
            "option": "string"
          }
        }
      ]
    },
    {
      "name": "unwrap",
      "docs": [
        "Remove a candy guard from a candy machine, setting the authority to the",
        "candy guard authority."
      ],
      "accounts": [
        {
          "name": "candyGuard",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "candyMachine",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "candyMachineAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "candyMachineProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "update",
      "docs": [
        "Update the candy guard configuration."
      ],
      "accounts": [
        {
          "name": "candyGuard",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "payer",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "data",
          "type": {
            "defined": "CandyGuardData"
          }
        }
      ]
    },
    {
      "name": "withdraw",
      "docs": [
        "Withdraw the rent SOL from the candy guard account."
      ],
      "accounts": [
        {
          "name": "candyGuard",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true
        }
      ],
      "args": []
    },
    {
      "name": "wrap",
      "docs": [
        "Add a candy guard to a candy machine. After the guard is added, mint",
        "is only allowed through the candy guard."
      ],
      "accounts": [
        {
          "name": "candyGuard",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "candyMachine",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "candyMachineProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "candyMachineAuthority",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "MintCounter",
      "docs": [
        "PDA to track the number of mints for an individual address."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "count",
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "CandyGuard",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "base",
            "type": "publicKey"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "authority",
            "type": "publicKey"
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "AddressGate",
      "docs": [
        "Configurations options for address gate. This guard only",
        "allows a specific address to be valid."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "address",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "AllowList",
      "docs": [
        "Configurations options for allow list. This guard uses",
        "a merkle tree to specify the addresses allowed to mint."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "merkleRoot",
            "docs": [
              "Merkle root of the addresses allowed to mint."
            ],
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "BotTax",
      "docs": [
        "Configurations options for bot tax. This guard is used to:",
        "* charge a penalty for invalid transactions.",
        "* validate that the mint transaction is the last transaction.",
        "",
        "The `bot_tax` is applied to any error that occurs during the",
        "validation of the guards."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "lamports",
            "type": "u64"
          },
          {
            "name": "lastInstruction",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "EndDate",
      "docs": [
        "Configurations options for end date."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "date",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "Gatekeeper",
      "docs": [
        "Configurations options for the gatekeeper."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "gatekeeperNetwork",
            "docs": [
              "The network for the gateway token required"
            ],
            "type": "publicKey"
          },
          {
            "name": "expireOnUse",
            "docs": [
              "Whether or not the token should expire after minting.",
              "The gatekeeper network must support this if true."
            ],
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "MintLimit",
      "docs": [
        "Configurations options for mint limit."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "id",
            "docs": [
              "Unique identifier of the mint limit."
            ],
            "type": "u8"
          },
          {
            "name": "limit",
            "docs": [
              "Limit of mints per individual address."
            ],
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "NftGate",
      "docs": [
        "Configurations options for the nft gate. This guard restricts",
        "the transaction to holders of a specified collection."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "requiredCollection",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "NftPayment",
      "docs": [
        "Configurations options for the nft payment. This is a payment",
        "guard that charges another NFT (token) from a specific collection."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "burn",
            "type": "bool"
          },
          {
            "name": "requiredCollection",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "RedemeedAmount",
      "docs": [
        "Configurations options for redeemed amount settings. This is a",
        "guard that stop the mint once the specified amount of items",
        "redeenmed is reached."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "maximum",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "SolPayment",
      "docs": [
        "Configurations options for the sol payment. This is a payment",
        "guard that charges in SOL (lamports)."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "lamports",
            "type": "u64"
          },
          {
            "name": "destination",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "StartDate",
      "docs": [
        "Configurations options for the start date. This guard determines",
        "the start date of the mint. If this guard is not specified, mint",
        "is enabled."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "date",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "ThirdPartySigner",
      "docs": [
        "Configurations options for the third party signer. This guard",
        "required a specified signer to validate the transaction."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "signerKey",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "TokenGate",
      "docs": [
        "Configurations options for the token gate. This guard only",
        "allows addresses that hold the specified spl-token."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mint",
            "type": "publicKey"
          },
          {
            "name": "burn",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "TokenPayment",
      "docs": [
        "Configurations options for the token payment. This is a payment",
        "guard that charges an amount in a specified spl-token."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "tokenMint",
            "type": "publicKey"
          },
          {
            "name": "destinationAta",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "CandyGuardData",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "default",
            "type": {
              "defined": "GuardSet"
            }
          },
          {
            "name": "groups",
            "type": {
              "option": {
                "vec": {
                  "defined": "Group"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "Group",
      "docs": [
        "A group represent a specific set of guards. When groups are used, transactions",
        "must specify which group should be used during validation."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "label",
            "type": "string"
          },
          {
            "name": "guards",
            "type": {
              "defined": "GuardSet"
            }
          }
        ]
      }
    },
    {
      "name": "GuardSet",
      "docs": [
        "The set of guards available."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "botTax",
            "docs": [
              "Last instruction check and bot tax (penalty for invalid transactions)."
            ],
            "type": {
              "option": {
                "defined": "BotTax"
              }
            }
          },
          {
            "name": "solPayment",
            "docs": [
              "Lamports guard (set the price for the mint in lamports)."
            ],
            "type": {
              "option": {
                "defined": "SolPayment"
              }
            }
          },
          {
            "name": "tokenPayment",
            "docs": [
              "Spl-token guard (set the price for the mint in spl-token amount)."
            ],
            "type": {
              "option": {
                "defined": "TokenPayment"
              }
            }
          },
          {
            "name": "startDate",
            "docs": [
              "Start data guard (controls when minting is allowed)."
            ],
            "type": {
              "option": {
                "defined": "StartDate"
              }
            }
          },
          {
            "name": "thirdPartySigner",
            "docs": [
              "Third party signer guard."
            ],
            "type": {
              "option": {
                "defined": "ThirdPartySigner"
              }
            }
          },
          {
            "name": "tokenGate",
            "docs": [
              "Whitelist guard (whitelist mint settings)."
            ],
            "type": {
              "option": {
                "defined": "TokenGate"
              }
            }
          },
          {
            "name": "gatekeeper",
            "docs": [
              "Gatekeeper guard"
            ],
            "type": {
              "option": {
                "defined": "Gatekeeper"
              }
            }
          },
          {
            "name": "endDate",
            "docs": [
              "End date guard"
            ],
            "type": {
              "option": {
                "defined": "EndDate"
              }
            }
          },
          {
            "name": "allowList",
            "docs": [
              "Allow list guard"
            ],
            "type": {
              "option": {
                "defined": "AllowList"
              }
            }
          },
          {
            "name": "mintLimit",
            "docs": [
              "Mint limit guard"
            ],
            "type": {
              "option": {
                "defined": "MintLimit"
              }
            }
          },
          {
            "name": "nftPayment",
            "docs": [
              "NFT Payment"
            ],
            "type": {
              "option": {
                "defined": "NftPayment"
              }
            }
          },
          {
            "name": "redemeedAmount",
            "docs": [
              "Redeemed amount guard"
            ],
            "type": {
              "option": {
                "defined": "RedemeedAmount"
              }
            }
          },
          {
            "name": "addressGate",
            "docs": [
              "Address gate"
            ],
            "type": {
              "option": {
                "defined": "AddressGate"
              }
            }
          },
          {
            "name": "nftGate",
            "docs": [
              "NFT gate"
            ],
            "type": {
              "option": {
                "defined": "NftGate"
              }
            }
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "InvalidAccountSize",
      "msg": "Could not save guard to account"
    },
    {
      "code": 6001,
      "name": "DeserializationError",
      "msg": "Could not deserialize guard"
    },
    {
      "code": 6002,
      "name": "PublicKeyMismatch",
      "msg": "Public key mismatch"
    },
    {
      "code": 6003,
      "name": "DataIncrementLimitExceeded",
      "msg": "Missing expected remaining account"
    },
    {
      "code": 6004,
      "name": "IncorrectOwner",
      "msg": "Account does not have correct owner"
    },
    {
      "code": 6005,
      "name": "Uninitialized",
      "msg": "Account is not initialized"
    },
    {
      "code": 6006,
      "name": "MissingRemainingAccount",
      "msg": "Missing expected remaining account"
    },
    {
      "code": 6007,
      "name": "NumericalOverflowError",
      "msg": "Numerical overflow error"
    },
    {
      "code": 6008,
      "name": "RequiredGroupLabelNotFound",
      "msg": "Missing required group label"
    },
    {
      "code": 6009,
      "name": "GroupNotFound",
      "msg": "Group not found"
    },
    {
      "code": 6010,
      "name": "LabelExceededLength",
      "msg": "Group not found"
    },
    {
      "code": 6011,
      "name": "CandyMachineEmpty",
      "msg": "Candy machine is empty"
    },
    {
      "code": 6012,
      "name": "CollectionKeyMismatch",
      "msg": "Collection public key mismatch"
    },
    {
      "code": 6013,
      "name": "MissingCollectionAccounts",
      "msg": "Missing collection accounts"
    },
    {
      "code": 6014,
      "name": "CollectionUpdateAuthorityKeyMismatch",
      "msg": "Collection update authority public key mismatch"
    },
    {
      "code": 6015,
      "name": "MintNotLastTransaction",
      "msg": "Mint must be the last instructions of the transaction"
    },
    {
      "code": 6016,
      "name": "MintNotLive",
      "msg": "Mint is not live"
    },
    {
      "code": 6017,
      "name": "NotEnoughSOL",
      "msg": "Not enough SOL to pay for the mint"
    },
    {
      "code": 6018,
      "name": "TokenTransferFailed",
      "msg": "Token transfer failed"
    },
    {
      "code": 6019,
      "name": "NotEnoughTokens",
      "msg": "Not enough tokens to pay for this minting"
    },
    {
      "code": 6020,
      "name": "MissingRequiredSignature",
      "msg": "A signature was required but not found"
    },
    {
      "code": 6021,
      "name": "TokenBurnFailed",
      "msg": "Token burn failed"
    },
    {
      "code": 6022,
      "name": "MissingTokenGate",
      "msg": "Missing token gate"
    },
    {
      "code": 6023,
      "name": "GatewayTokenInvalid",
      "msg": "Gateway token is not valid"
    },
    {
      "code": 6024,
      "name": "AfterEndDate",
      "msg": "Current time is after the set end date"
    },
    {
      "code": 6025,
      "name": "InvalidMintTime",
      "msg": "Current time is not within the allowed mint time"
    },
    {
      "code": 6026,
      "name": "AddressNotFoundInAllowedList",
      "msg": "Address not found on the allowed list"
    },
    {
      "code": 6027,
      "name": "MissingAllowedListProof",
      "msg": "Missing allowed list proof"
    },
    {
      "code": 6028,
      "name": "AllowedMintLimitReached",
      "msg": "The maximum number of allowed mints was reached"
    },
    {
      "code": 6029,
      "name": "InvalidNFTCollectionPayment",
      "msg": "Invalid NFT Collection Payment"
    },
    {
      "code": 6030,
      "name": "MaximumRedeemedAmount",
      "msg": "Current redemeed items is at the set maximum amount"
    },
    {
      "code": 6031,
      "name": "AddressNotAuthorized",
      "msg": "Address not authorized"
    }
  ],
  "metadata": {
    "address": "CnDYGRdU51FsSyLnVgSd19MCFxA4YHT5h3nacvCKMPUJ",
    "origin": "anchor",
    "binaryVersion": "0.25.0",
    "libVersion": "0.25.0"
  }
}