/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type RecoverNestedAssociatedTokenInstructionAccounts = {
  nestedAssociatedAccountAddress: PublicKey;
  nestedTokenMintAddress: PublicKey;
  destinationAssociatedAccountAddress: PublicKey;
  ownerAssociatedAccountAddress: PublicKey;
  ownerTokenMintAddress: PublicKey;
  walletAddress: Signer;
  tokenProgram?: PublicKey;
};

// Instruction.
export function recoverNestedAssociatedToken(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: RecoverNestedAssociatedTokenInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splAssociatedToken',
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  addObjectProperty(
    resolvingAccounts,
    'tokenProgram',
    input.tokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };

  // Nested Associated Account Address.
  keys.push({
    pubkey: resolvedAccounts.nestedAssociatedAccountAddress,
    isSigner: false,
    isWritable: isWritable(
      resolvedAccounts.nestedAssociatedAccountAddress,
      true
    ),
  });

  // Nested Token Mint Address.
  keys.push({
    pubkey: resolvedAccounts.nestedTokenMintAddress,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.nestedTokenMintAddress, false),
  });

  // Destination Associated Account Address.
  keys.push({
    pubkey: resolvedAccounts.destinationAssociatedAccountAddress,
    isSigner: false,
    isWritable: isWritable(
      resolvedAccounts.destinationAssociatedAccountAddress,
      true
    ),
  });

  // Owner Associated Account Address.
  keys.push({
    pubkey: resolvedAccounts.ownerAssociatedAccountAddress,
    isSigner: false,
    isWritable: isWritable(
      resolvedAccounts.ownerAssociatedAccountAddress,
      false
    ),
  });

  // Owner Token Mint Address.
  keys.push({
    pubkey: resolvedAccounts.ownerTokenMintAddress,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.ownerTokenMintAddress, false),
  });

  // Wallet Address.
  signers.push(resolvedAccounts.walletAddress);
  keys.push({
    pubkey: resolvedAccounts.walletAddress.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.walletAddress, true),
  });

  // Token Program.
  keys.push({
    pubkey: resolvedAccounts.tokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenProgram, false),
  });

  // Data.
  const data = new Uint8Array();

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
