/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  SolAmount,
  TransactionBuilder,
  mapAmountSerializer,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type TransferSolInstructionAccounts = {
  source?: Signer;
  destination: PublicKey;
};

// Data.
export type TransferSolInstructionData = {
  discriminator: number;
  amount: SolAmount;
};

export type TransferSolInstructionDataArgs = { amount: SolAmount };

export function getTransferSolInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferSolInstructionDataArgs, TransferSolInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferSolInstructionDataArgs,
    TransferSolInstructionData,
    TransferSolInstructionData
  >(
    s.struct<TransferSolInstructionData>(
      [
        ['discriminator', s.u32()],
        ['amount', mapAmountSerializer(s.u64(), 'SOL', 9)],
      ],
      { description: 'TransferSolInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 2 } as TransferSolInstructionData)
  ) as Serializer<TransferSolInstructionDataArgs, TransferSolInstructionData>;
}

// Args.
export type TransferSolInstructionArgs = TransferSolInstructionDataArgs;

// Instruction.
export function transferSol(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: TransferSolInstructionAccounts & TransferSolInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'source',
    input.source ?? context.identity
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Source.
  signers.push(resolvedAccounts.source);
  keys.push({
    pubkey: resolvedAccounts.source.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.source, true),
  });

  // Destination.
  keys.push({
    pubkey: resolvedAccounts.destination,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.destination, true),
  });

  // Data.
  const data =
    getTransferSolInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
