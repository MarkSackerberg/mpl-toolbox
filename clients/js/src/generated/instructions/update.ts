/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
} from '@lorisleiva/js-core';

// Accounts.
export type updateInstructionAccounts = {
  candyGuard: PublicKey;
  authority: Signer;
  payer: Signer;
  systemProgram?: PublicKey;
};

// Arguments.
export type updateInstructionArgs = { data: Uint8Array };

// Data.
type updateInstructionData = updateInstructionArgs;
export function getupdateInstructionDataSerializer(
  context: Pick<Context, 'serializer' | 'eddsa'>
): Serializer<updateInstructionArgs> {
  const s = context.serializer;
  return s.struct<updateInstructionData>(
    [['data', s.bytes]],
    'updateInstructionData'
  );
}

// Instruction.
export function update(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  accounts: updateInstructionAccounts,
  args: updateInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'candyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Candy Guard.
  keys.push({
    pubkey: accounts.candyGuard,
    isSigner: false,
    isWritable: false,
  });

  // Authority.
  signers.push(accounts.authority);
  keys.push({
    pubkey: accounts.authority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Payer.
  signers.push(accounts.payer);
  keys.push({
    pubkey: accounts.payer.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // System Program.
  keys.push({
    pubkey:
      accounts.systemProgram ??
      getProgramAddressWithFallback(
        context,
        'splSystem',
        '11111111111111111111111111111111'
      ),
    isSigner: false,
    isWritable: false,
  });

  // Data.
  const data = getupdateInstructionDataSerializer(context).serialize(args);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
