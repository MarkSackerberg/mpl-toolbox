/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';
import { CandyMachineData, getCandyMachineDataSerializer } from '../types';

// Accounts.
export type InitializeCandyMachineInstructionAccounts = {
  candyMachine: PublicKey;
  authorityPda: PublicKey;
  authority: PublicKey;
  payer: Signer;
  collectionMetadata: PublicKey;
  collectionMint: PublicKey;
  collectionMasterEdition: PublicKey;
  collectionUpdateAuthority: Signer;
  collectionAuthorityRecord: PublicKey;
  tokenMetadataProgram: PublicKey;
  systemProgram?: PublicKey;
};

// Arguments.
export type InitializeCandyMachineInstructionArgs = { data: CandyMachineData };

// Discriminator.
export type InitializeCandyMachineInstructionDiscriminator = Array<number>;
export function getInitializeCandyMachineInstructionDiscriminator(): InitializeCandyMachineInstructionDiscriminator {
  return [175, 175, 109, 31, 13, 152, 155, 237];
}

// Data.
type InitializeCandyMachineInstructionData =
  InitializeCandyMachineInstructionArgs & {
    discriminator: InitializeCandyMachineInstructionDiscriminator;
  };
export function getInitializeCandyMachineInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitializeCandyMachineInstructionArgs> {
  const s = context.serializer;
  const discriminator = getInitializeCandyMachineInstructionDiscriminator();
  const serializer: Serializer<InitializeCandyMachineInstructionData> =
    s.struct<InitializeCandyMachineInstructionData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['data', getCandyMachineDataSerializer(context)],
      ],
      'InitializeCandyMachineInstructionData'
    );
  return mapSerializer(
    serializer,
    (value: InitializeCandyMachineInstructionArgs) => ({
      ...value,
      discriminator,
    })
  );
}

// Instruction.
export function initializeCandyMachine(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: InitializeCandyMachineInstructionAccounts &
    InitializeCandyMachineInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Candy Machine.
  keys.push({ pubkey: input.candyMachine, isSigner: false, isWritable: false });

  // Authority Pda.
  keys.push({ pubkey: input.authorityPda, isSigner: false, isWritable: false });

  // Authority.
  keys.push({ pubkey: input.authority, isSigner: false, isWritable: false });

  // Payer.
  signers.push(input.payer);
  keys.push({
    pubkey: input.payer.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Collection Metadata.
  keys.push({
    pubkey: input.collectionMetadata,
    isSigner: false,
    isWritable: false,
  });

  // Collection Mint.
  keys.push({
    pubkey: input.collectionMint,
    isSigner: false,
    isWritable: false,
  });

  // Collection Master Edition.
  keys.push({
    pubkey: input.collectionMasterEdition,
    isSigner: false,
    isWritable: false,
  });

  // Collection Update Authority.
  signers.push(input.collectionUpdateAuthority);
  keys.push({
    pubkey: input.collectionUpdateAuthority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Collection Authority Record.
  keys.push({
    pubkey: input.collectionAuthorityRecord,
    isSigner: false,
    isWritable: false,
  });

  // Token Metadata Program.
  keys.push({
    pubkey: input.tokenMetadataProgram,
    isSigner: false,
    isWritable: false,
  });

  // System Program.
  keys.push({
    pubkey:
      input.systemProgram ??
      getProgramAddressWithFallback(
        context,
        'splSystem',
        '11111111111111111111111111111111'
      ),
    isSigner: false,
    isWritable: false,
  });

  // Data.
  const data =
    getInitializeCandyMachineInstructionDataSerializer(context).serialize(
      input
    );

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
