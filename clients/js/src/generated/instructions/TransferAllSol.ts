/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type TransferAllSolInstructionAccounts = {
  /** The source account sending all its lamports */
  source?: Signer;
  /** The destination account receiving the lamports */
  destination: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
};

// Arguments.
export type TransferAllSolInstructionData = { discriminator: number };

export type TransferAllSolInstructionArgs = {};

export function getTransferAllSolInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferAllSolInstructionArgs, TransferAllSolInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferAllSolInstructionArgs,
    TransferAllSolInstructionData,
    TransferAllSolInstructionData
  >(
    s.struct<TransferAllSolInstructionData>(
      [['discriminator', s.u8]],
      'TransferAllSolInstructionArgs'
    ),
    (value) => ({ discriminator: 1, ...value } as TransferAllSolInstructionData)
  ) as Serializer<TransferAllSolInstructionArgs, TransferAllSolInstructionData>;
}

// Instruction.
export function transferAllSol(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    identity: Context['identity'];
    programs?: Context['programs'];
  },
  input: TransferAllSolInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplSystemExtras',
    'SysExL2WDyJi9aRZrXorrjHJut3JwHQ7R9bTyctbNNG'
  );

  // Source.
  if (input.source) {
    signers.push(input.source);
    keys.push({
      pubkey: input.source.publicKey,
      isSigner: true,
      isWritable: true,
    });
  } else {
    signers.push(context.identity);
    keys.push({
      pubkey: context.identity.publicKey,
      isSigner: true,
      isWritable: true,
    });
  }

  // Destination.
  keys.push({ pubkey: input.destination, isSigner: false, isWritable: true });

  // System Program.
  if (input.systemProgram) {
    keys.push({
      pubkey: input.systemProgram,
      isSigner: false,
      isWritable: false,
    });
  } else {
    keys.push({
      pubkey: getProgramAddressWithFallback(
        context,
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isSigner: false,
      isWritable: false,
    });
  }

  // Data.
  const data = getTransferAllSolInstructionDataSerializer(context).serialize(
    {}
  );

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
