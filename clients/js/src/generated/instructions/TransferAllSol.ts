/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type TransferAllSolInstructionAccounts = {
  /** The source account sending all its lamports */
  source?: Signer;
  /** The destination account receiving the lamports */
  destination: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
};

// Arguments.
export type TransferAllSolInstructionData = { discriminator: number };

export type TransferAllSolInstructionArgs = {};

export function getTransferAllSolInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferAllSolInstructionArgs, TransferAllSolInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferAllSolInstructionArgs,
    TransferAllSolInstructionData,
    TransferAllSolInstructionData
  >(
    s.struct<TransferAllSolInstructionData>(
      [['discriminator', s.u8]],
      'TransferAllSolInstructionArgs'
    ),
    (value) => ({ discriminator: 1, ...value } as TransferAllSolInstructionData)
  ) as Serializer<TransferAllSolInstructionArgs, TransferAllSolInstructionData>;
}

// Instruction.
export function transferAllSol(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: TransferAllSolInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get('mplSystemExtras').address;

  // Resolved accounts.
  const sourceAccount = input.source ?? context.identity;
  const destinationAccount = input.destination;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').address,
    isWritable: false,
  };

  // Source.
  signers.push(sourceAccount);
  keys.push({
    pubkey: sourceAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(sourceAccount, true),
  });

  // Destination.
  keys.push({
    pubkey: destinationAccount,
    isSigner: false,
    isWritable: isWritable(destinationAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Data.
  const data = getTransferAllSolInstructionDataSerializer(context).serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
