/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  SolAmount,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapAmountSerializer,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type TransferSolInstructionAccounts = {
  source?: Signer;
  destination: PublicKey;
};

// Arguments.
export type TransferSolInstructionData = {
  discriminator: number;
  lamports: SolAmount;
};

export type TransferSolInstructionArgs = { lamports: SolAmount };

export function getTransferSolInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferSolInstructionArgs, TransferSolInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferSolInstructionArgs,
    TransferSolInstructionData,
    TransferSolInstructionData
  >(
    s.struct<TransferSolInstructionData>(
      [
        ['discriminator', s.u32],
        ['lamports', mapAmountSerializer(s.u64, 'SOL', 9)],
      ],
      'TransferSolInstructionArgs'
    ),
    (value) => ({ discriminator: 2, ...value } as TransferSolInstructionData)
  ) as Serializer<TransferSolInstructionArgs, TransferSolInstructionData>;
}

// Instruction.
export function transferSol(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    identity: Context['identity'];
    programs?: Context['programs'];
  },
  input: TransferSolInstructionAccounts & TransferSolInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splSystem',
    '11111111111111111111111111111111'
  );

  // Source.
  if (input.source) {
    signers.push(input.source);
    keys.push({
      pubkey: input.source.publicKey,
      isSigner: true,
      isWritable: true,
    });
  } else {
    signers.push(context.identity);
    keys.push({
      pubkey: context.identity.publicKey,
      isSigner: true,
      isWritable: true,
    });
  }

  // Destination.
  keys.push({ pubkey: input.destination, isSigner: false, isWritable: true });

  // Data.
  const data =
    getTransferSolInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
