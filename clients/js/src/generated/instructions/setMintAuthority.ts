/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
} from '@lorisleiva/js-core';

// Accounts.
export type setMintAuthorityInstructionAccounts = {
  candyMachine: PublicKey;
  authority: Signer;
  mintAuthority: Signer;
};

// Instruction.
export function setMintAuthority(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  accounts: setMintAuthorityInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'candyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Candy Machine.
  keys.push({
    pubkey: accounts.candyMachine,
    isSigner: false,
    isWritable: false,
  });

  // Authority.
  signers.push(accounts.authority);
  keys.push({
    pubkey: accounts.authority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Mint Authority.
  signers.push(accounts.mintAuthority);
  keys.push({
    pubkey: accounts.mintAuthority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data = new Uint8Array();

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
