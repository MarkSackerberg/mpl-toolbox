/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type InitializeToken2InstructionAccounts = {
  account: PublicKey;
  mint: PublicKey;
  rent?: PublicKey;
};

// Data.
export type InitializeToken2InstructionData = {
  discriminator: number;
  owner: PublicKey;
};

export type InitializeToken2InstructionDataArgs = { owner: PublicKey };

export function getInitializeToken2InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  InitializeToken2InstructionDataArgs,
  InitializeToken2InstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    InitializeToken2InstructionDataArgs,
    InitializeToken2InstructionData,
    InitializeToken2InstructionData
  >(
    s.struct<InitializeToken2InstructionData>(
      [
        ['discriminator', s.u8()],
        ['owner', s.publicKey()],
      ],
      { description: 'InitializeToken2InstructionData' }
    ),
    (value) =>
      ({ ...value, discriminator: 16 } as InitializeToken2InstructionData)
  ) as Serializer<
    InitializeToken2InstructionDataArgs,
    InitializeToken2InstructionData
  >;
}

// Args.
export type InitializeToken2InstructionArgs =
  InitializeToken2InstructionDataArgs;

// Instruction.
export function initializeToken2(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: InitializeToken2InstructionAccounts & InitializeToken2InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'rent',
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111')
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Account.
  keys.push({
    pubkey: resolvedAccounts.account,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.account, true),
  });

  // Mint.
  keys.push({
    pubkey: resolvedAccounts.mint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mint, false),
  });

  // Rent.
  keys.push({
    pubkey: resolvedAccounts.rent,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.rent, false),
  });

  // Data.
  const data =
    getInitializeToken2InstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
