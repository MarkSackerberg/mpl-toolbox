/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
} from '@lorisleiva/js-core';

// Accounts.
export type ApproveTokenDelegateCheckedInstructionAccounts = {
  source: PublicKey;
  mint: PublicKey;
  delegate: PublicKey;
  owner: Signer;
};

// Arguments.
export type ApproveTokenDelegateCheckedInstructionData = {
  amount: bigint;
  decimals: number;
};

export type ApproveTokenDelegateCheckedInstructionArgs = {
  amount: number | bigint;
  decimals: number;
};

export function getApproveTokenDelegateCheckedInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  ApproveTokenDelegateCheckedInstructionArgs,
  ApproveTokenDelegateCheckedInstructionData
> {
  const s = context.serializer;
  return s.struct<ApproveTokenDelegateCheckedInstructionData>(
    [
      ['amount', s.u64],
      ['decimals', s.u8],
    ],
    'approveCheckedInstructionArgs'
  ) as Serializer<
    ApproveTokenDelegateCheckedInstructionArgs,
    ApproveTokenDelegateCheckedInstructionData
  >;
}

// Instruction.
export function approveTokenDelegateChecked(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: ApproveTokenDelegateCheckedInstructionAccounts &
    ApproveTokenDelegateCheckedInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Source.
  keys.push({ pubkey: input.source, isSigner: false, isWritable: true });

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: false });

  // Delegate.
  keys.push({ pubkey: input.delegate, isSigner: false, isWritable: false });

  // Owner.
  signers.push(input.owner);
  keys.push({
    pubkey: input.owner.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data =
    getApproveTokenDelegateCheckedInstructionDataSerializer(context).serialize(
      input
    );

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
