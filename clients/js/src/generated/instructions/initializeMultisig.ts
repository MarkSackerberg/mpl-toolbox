/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type InitializeMultisigInstructionAccounts = {
  multisig: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type InitializeMultisigInstructionData = {
  discriminator: number;
  m: number;
};

export type InitializeMultisigInstructionDataArgs = { m: number };

export function getInitializeMultisigInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  InitializeMultisigInstructionDataArgs,
  InitializeMultisigInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    InitializeMultisigInstructionDataArgs,
    any,
    InitializeMultisigInstructionData
  >(
    s.struct<InitializeMultisigInstructionData>(
      [
        ['discriminator', s.u8()],
        ['m', s.u8()],
      ],
      { description: 'InitializeMultisigInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 2 })
  ) as Serializer<
    InitializeMultisigInstructionDataArgs,
    InitializeMultisigInstructionData
  >;
}

// Args.
export type InitializeMultisigInstructionArgs =
  InitializeMultisigInstructionDataArgs;

// Instruction.
export function initializeMultisig(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: InitializeMultisigInstructionAccounts &
    InitializeMultisigInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    multisig: [input.multisig, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.multisig, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getInitializeMultisigInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
