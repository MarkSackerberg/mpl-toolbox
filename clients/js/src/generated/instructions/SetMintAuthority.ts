/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type SetMintAuthorityInstructionAccounts = {
  candyMachine: PublicKey;
  authority: Signer;
  mintAuthority: Signer;
};

// Discriminator.
export type SetMintAuthorityInstructionDiscriminator = Array<number>;
export function getSetMintAuthorityInstructionDiscriminator(): SetMintAuthorityInstructionDiscriminator {
  return [67, 127, 155, 187, 100, 174, 103, 121];
}

// Data.
type SetMintAuthorityInstructionData = {
  discriminator: SetMintAuthorityInstructionDiscriminator;
};
export function getSetMintAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<{}> {
  const s = context.serializer;
  const discriminator = getSetMintAuthorityInstructionDiscriminator();
  const serializer: Serializer<SetMintAuthorityInstructionData> =
    s.struct<SetMintAuthorityInstructionData>(
      [['discriminator', s.array(s.u8, 8)]],
      'SetMintAuthorityInstructionData'
    );
  return mapSerializer(serializer, () => ({ discriminator }));
}

// Instruction.
export function setMintAuthority(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: SetMintAuthorityInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Candy Machine.
  keys.push({ pubkey: input.candyMachine, isSigner: false, isWritable: false });

  // Authority.
  signers.push(input.authority);
  keys.push({
    pubkey: input.authority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Mint Authority.
  signers.push(input.mintAuthority);
  keys.push({
    pubkey: input.mintAuthority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data = getSetMintAuthorityInstructionDataSerializer(context).serialize(
    {}
  );

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
