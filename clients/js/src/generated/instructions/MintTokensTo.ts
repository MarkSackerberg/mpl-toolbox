/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type MintTokensToInstructionAccounts = {
  mint: PublicKey;
  account: PublicKey;
  owner: Signer;
};

// Arguments.
export type MintTokensToInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type MintTokensToInstructionArgs = { amount: number | bigint };

export function getMintTokensToInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MintTokensToInstructionArgs, MintTokensToInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    MintTokensToInstructionArgs,
    MintTokensToInstructionData,
    MintTokensToInstructionData
  >(
    s.struct<MintTokensToInstructionData>(
      [
        ['discriminator', s.u8],
        ['amount', s.u64],
      ],
      'mintToInstructionArgs'
    ),
    (value) => ({ discriminator: 7, ...value } as MintTokensToInstructionData)
  ) as Serializer<MintTokensToInstructionArgs, MintTokensToInstructionData>;
}

// Instruction.
export function mintTokensTo(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: MintTokensToInstructionAccounts & MintTokensToInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: true });

  // Account.
  keys.push({ pubkey: input.account, isSigner: false, isWritable: true });

  // Owner.
  signers.push(input.owner);
  keys.push({
    pubkey: input.owner.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data =
    getMintTokensToInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
