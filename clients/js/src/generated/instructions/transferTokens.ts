/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type TransferTokensInstructionAccounts = {
  source: PublicKey | Pda;
  destination: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type TransferTokensInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type TransferTokensInstructionDataArgs = { amount: number | bigint };

export function getTransferTokensInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  TransferTokensInstructionDataArgs,
  TransferTokensInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    TransferTokensInstructionDataArgs,
    any,
    TransferTokensInstructionData
  >(
    s.struct<TransferTokensInstructionData>(
      [
        ['discriminator', s.u8()],
        ['amount', s.u64()],
      ],
      { description: 'TransferTokensInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    TransferTokensInstructionDataArgs,
    TransferTokensInstructionData
  >;
}

// Args.
export type TransferTokensInstructionArgs = TransferTokensInstructionDataArgs;

// Instruction.
export function transferTokens(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: TransferTokensInstructionAccounts & TransferTokensInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    source: [input.source, true] as const,
    destination: [input.destination, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.source, false);
  addAccountMeta(keys, signers, resolvedAccounts.destination, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);

  // Data.
  const data =
    getTransferTokensInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
