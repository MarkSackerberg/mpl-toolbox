/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';
import { GuardType, getGuardTypeSerializer } from '../types';

// Accounts.
export type RouteInstructionAccounts = {
  candyGuard: PublicKey;
  candyMachine: PublicKey;
  payer: Signer;
};

// Arguments.
export type RouteInstructionData = {
  discriminator: Array<number>;
  /** The target guard type. */
  guard: GuardType;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  label: Option<string>;
};
export type RouteInstructionArgs = {
  /** The target guard type. */
  guard: GuardType;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  label: Option<string>;
};

export function getRouteInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<RouteInstructionArgs, RouteInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    RouteInstructionArgs,
    RouteInstructionData,
    RouteInstructionData
  >(
    s.struct<RouteInstructionData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['guard', getGuardTypeSerializer(context)],
        ['data', s.bytes],
        ['label', s.option(s.string)],
      ],
      'routeInstructionArgs'
    ),
    (value) =>
      ({
        discriminator: [229, 23, 203, 151, 122, 227, 173, 42],
        ...value,
      } as RouteInstructionData)
  ) as Serializer<RouteInstructionArgs, RouteInstructionData>;
}

// Instruction.
export function route(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: RouteInstructionAccounts & RouteInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Candy Guard.
  keys.push({ pubkey: input.candyGuard, isSigner: false, isWritable: false });

  // Candy Machine.
  keys.push({ pubkey: input.candyMachine, isSigner: false, isWritable: false });

  // Payer.
  signers.push(input.payer);
  keys.push({
    pubkey: input.payer.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data = getRouteInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
