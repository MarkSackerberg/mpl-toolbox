/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type InitializeToken3InstructionAccounts = {
  account: PublicKey;
  mint: PublicKey;
};

// Arguments.
export type InitializeToken3InstructionData = {
  discriminator: number;
  owner: PublicKey;
};

export type InitializeToken3InstructionArgs = { owner: PublicKey };

export function getInitializeToken3InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  InitializeToken3InstructionArgs,
  InitializeToken3InstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    InitializeToken3InstructionArgs,
    InitializeToken3InstructionData,
    InitializeToken3InstructionData
  >(
    s.struct<InitializeToken3InstructionData>(
      [
        ['discriminator', s.u8],
        ['owner', s.publicKey],
      ],
      'initializeAccount3InstructionArgs'
    ),
    (value) =>
      ({ discriminator: 18, ...value } as InitializeToken3InstructionData)
  ) as Serializer<
    InitializeToken3InstructionArgs,
    InitializeToken3InstructionData
  >;
}

// Instruction.
export function initializeToken3(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: InitializeToken3InstructionAccounts & InitializeToken3InstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Account.
  keys.push({ pubkey: input.account, isSigner: false, isWritable: true });

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: false });

  // Data.
  const data =
    getInitializeToken3InstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
