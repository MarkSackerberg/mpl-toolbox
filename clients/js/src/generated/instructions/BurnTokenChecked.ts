/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type BurnTokenCheckedInstructionAccounts = {
  account: PublicKey;
  mint: PublicKey;
  authority?: Signer;
};

// Arguments.
export type BurnTokenCheckedInstructionData = {
  discriminator: number;
  amount: bigint;
  decimals: number;
};

export type BurnTokenCheckedInstructionArgs = {
  amount: number | bigint;
  decimals: number;
};

export function getBurnTokenCheckedInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  BurnTokenCheckedInstructionArgs,
  BurnTokenCheckedInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    BurnTokenCheckedInstructionArgs,
    BurnTokenCheckedInstructionData,
    BurnTokenCheckedInstructionData
  >(
    s.struct<BurnTokenCheckedInstructionData>(
      [
        ['discriminator', s.u8],
        ['amount', s.u64],
        ['decimals', s.u8],
      ],
      'BurnCheckedInstructionArgs'
    ),
    (value) =>
      ({ discriminator: 15, ...value } as BurnTokenCheckedInstructionData)
  ) as Serializer<
    BurnTokenCheckedInstructionArgs,
    BurnTokenCheckedInstructionData
  >;
}

// Instruction.
export function burnTokenChecked(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    identity: Context['identity'];
    programs?: Context['programs'];
  },
  input: BurnTokenCheckedInstructionAccounts & BurnTokenCheckedInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Account.
  keys.push({ pubkey: input.account, isSigner: false, isWritable: true });

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: true });

  // Authority.
  if (input.authority) {
    signers.push(input.authority);
    keys.push({
      pubkey: input.authority.publicKey,
      isSigner: true,
      isWritable: false,
    });
  } else {
    signers.push(context.identity);
    keys.push({
      pubkey: context.identity.publicKey,
      isSigner: true,
      isWritable: false,
    });
  }

  // Data.
  const data =
    getBurnTokenCheckedInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
