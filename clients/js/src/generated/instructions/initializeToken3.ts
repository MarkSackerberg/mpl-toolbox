/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta } from '../shared';

// Accounts.
export type InitializeToken3InstructionAccounts = {
  account: PublicKey | Pda;
  mint: PublicKey | Pda;
};

// Data.
export type InitializeToken3InstructionData = {
  discriminator: number;
  owner: PublicKey;
};

export type InitializeToken3InstructionDataArgs = { owner: PublicKey };

export function getInitializeToken3InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  InitializeToken3InstructionDataArgs,
  InitializeToken3InstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    InitializeToken3InstructionDataArgs,
    any,
    InitializeToken3InstructionData
  >(
    s.struct<InitializeToken3InstructionData>(
      [
        ['discriminator', s.u8()],
        ['owner', s.publicKey()],
      ],
      { description: 'InitializeToken3InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 18 })
  ) as Serializer<
    InitializeToken3InstructionDataArgs,
    InitializeToken3InstructionData
  >;
}

// Args.
export type InitializeToken3InstructionArgs =
  InitializeToken3InstructionDataArgs;

// Instruction.
export function initializeToken3(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: InitializeToken3InstructionAccounts & InitializeToken3InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    account: [input.account, true] as const,
    mint: [input.mint, false] as const,
  };
  const resolvingArgs = {};
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.account, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);

  // Data.
  const data =
    getInitializeToken3InstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
