/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type RevokeTokenDelegateInstructionAccounts = {
  source: PublicKey;
  owner: Signer;
};

// Arguments.
export type RevokeTokenDelegateInstructionData = { discriminator: number };

export type RevokeTokenDelegateInstructionArgs = {};

export function getRevokeTokenDelegateInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  RevokeTokenDelegateInstructionArgs,
  RevokeTokenDelegateInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    RevokeTokenDelegateInstructionArgs,
    RevokeTokenDelegateInstructionData,
    RevokeTokenDelegateInstructionData
  >(
    s.struct<RevokeTokenDelegateInstructionData>(
      [['discriminator', s.u8]],
      'revokeInstructionArgs'
    ),
    (value) =>
      ({ discriminator: 5, ...value } as RevokeTokenDelegateInstructionData)
  ) as Serializer<
    RevokeTokenDelegateInstructionArgs,
    RevokeTokenDelegateInstructionData
  >;
}

// Instruction.
export function revokeTokenDelegate(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: RevokeTokenDelegateInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Source.
  keys.push({ pubkey: input.source, isSigner: false, isWritable: true });

  // Owner.
  signers.push(input.owner);
  keys.push({
    pubkey: input.owner.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data = getRevokeTokenDelegateInstructionDataSerializer(
    context
  ).serialize({});

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
