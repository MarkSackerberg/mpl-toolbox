/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type CreateTokenIfMissingInstructionAccounts = {
  /** The account paying for the token account creation if needed */
  payer?: Signer;
  /** The token account that may or may not exist */
  token: PublicKey;
  /** The mint account of the provided token account */
  mint: PublicKey;
  /** The owner of the provided token account */
  owner: PublicKey;
  /** The associated token account which may be the same as the token account */
  ata: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Token program */
  tokenProgram?: PublicKey;
  /** Associated Token program */
  ataProgram?: PublicKey;
};

// Arguments.
export type CreateTokenIfMissingInstructionData = { discriminator: number };

export type CreateTokenIfMissingInstructionArgs = {};

export function getCreateTokenIfMissingInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  CreateTokenIfMissingInstructionArgs,
  CreateTokenIfMissingInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    CreateTokenIfMissingInstructionArgs,
    CreateTokenIfMissingInstructionData,
    CreateTokenIfMissingInstructionData
  >(
    s.struct<CreateTokenIfMissingInstructionData>(
      [['discriminator', s.u8]],
      'CreateTokenIfMissingInstructionArgs'
    ),
    (value) =>
      ({ discriminator: 0, ...value } as CreateTokenIfMissingInstructionData)
  ) as Serializer<
    CreateTokenIfMissingInstructionArgs,
    CreateTokenIfMissingInstructionData
  >;
}

// Instruction.
export function createTokenIfMissing(
  context: {
    serializer: Context['serializer'];
    payer: Context['payer'];
    programs?: Context['programs'];
  },
  input: CreateTokenIfMissingInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplTokenExtras',
    'TokExjvjJmhKaRBShsBAsbSvEWMA1AgUNK7ps4SAc2p'
  );

  // Resolved accounts.
  const payerAccount = input.payer ?? context.payer;
  const tokenAccount = input.token;
  const mintAccount = input.mint;
  const ownerAccount = input.owner;
  const ataAccount = input.ata;
  const systemProgramAccount = input.systemProgram ?? {
    ...getProgramAddressWithFallback(
      context,
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };
  const tokenProgramAccount = input.tokenProgram ?? {
    ...getProgramAddressWithFallback(
      context,
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    ),
    isWritable: false,
  };
  const ataProgramAccount = input.ataProgram ?? {
    ...getProgramAddressWithFallback(
      context,
      'splAssociatedToken',
      'TokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    ),
    isWritable: false,
  };

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Token.
  keys.push({
    pubkey: tokenAccount,
    isSigner: false,
    isWritable: isWritable(tokenAccount, false),
  });

  // Mint.
  keys.push({
    pubkey: mintAccount,
    isSigner: false,
    isWritable: isWritable(mintAccount, false),
  });

  // Owner.
  keys.push({
    pubkey: ownerAccount,
    isSigner: false,
    isWritable: isWritable(ownerAccount, false),
  });

  // Ata.
  keys.push({
    pubkey: ataAccount,
    isSigner: false,
    isWritable: isWritable(ataAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Token Program.
  keys.push({
    pubkey: tokenProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenProgramAccount, false),
  });

  // Ata Program.
  keys.push({
    pubkey: ataProgramAccount,
    isSigner: false,
    isWritable: isWritable(ataProgramAccount, false),
  });

  // Data.
  const data = getCreateTokenIfMissingInstructionDataSerializer(
    context
  ).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
