/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type SyncNativeInstructionAccounts = {
  account: PublicKey;
};

// Arguments.
export type SyncNativeInstructionData = { discriminator: number };

export type SyncNativeInstructionArgs = {};

export function getSyncNativeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<SyncNativeInstructionArgs, SyncNativeInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    SyncNativeInstructionArgs,
    SyncNativeInstructionData,
    SyncNativeInstructionData
  >(
    s.struct<SyncNativeInstructionData>(
      [['discriminator', s.u8]],
      'syncNativeInstructionArgs'
    ),
    (value) => ({ discriminator: 17, ...value } as SyncNativeInstructionData)
  ) as Serializer<SyncNativeInstructionArgs, SyncNativeInstructionData>;
}

// Instruction.
export function syncNative(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: SyncNativeInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Account.
  keys.push({ pubkey: input.account, isSigner: false, isWritable: true });

  // Data.
  const data = getSyncNativeInstructionDataSerializer(context).serialize({});

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
