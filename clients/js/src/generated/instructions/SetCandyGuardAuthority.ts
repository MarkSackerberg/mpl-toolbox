/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
} from '@lorisleiva/js-core';

// Accounts.
export type SetCandyGuardAuthorityInstructionAccounts = {
  candyGuard: PublicKey;
  authority: Signer;
};

// Arguments.
export type SetCandyGuardAuthorityInstructionArgs = { newAuthority: PublicKey };

// Data.
type SetCandyGuardAuthorityInstructionData =
  SetCandyGuardAuthorityInstructionArgs;
export function getSetCandyGuardAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<SetCandyGuardAuthorityInstructionArgs> {
  const s = context.serializer;
  return s.struct<SetCandyGuardAuthorityInstructionData>(
    [['newAuthority', s.publicKey]],
    'SetCandyGuardAuthorityInstructionData'
  );
}

// Instruction.
export function setCandyGuardAuthority(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: SetCandyGuardAuthorityInstructionAccounts &
    SetCandyGuardAuthorityInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'candyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Candy Guard.
  keys.push({ pubkey: input.candyGuard, isSigner: false, isWritable: false });

  // Authority.
  signers.push(input.authority);
  keys.push({
    pubkey: input.authority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data =
    getSetCandyGuardAuthorityInstructionDataSerializer(context).serialize(
      input
    );

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
