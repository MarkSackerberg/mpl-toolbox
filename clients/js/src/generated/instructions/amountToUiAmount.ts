/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { isWritable } from '../shared';

// Accounts.
export type AmountToUiAmountInstructionAccounts = {
  mint: PublicKey;
};

// Data.
export type AmountToUiAmountInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type AmountToUiAmountInstructionDataArgs = { amount: number | bigint };

export function getAmountToUiAmountInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  AmountToUiAmountInstructionDataArgs,
  AmountToUiAmountInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    AmountToUiAmountInstructionDataArgs,
    any,
    AmountToUiAmountInstructionData
  >(
    s.struct<AmountToUiAmountInstructionData>(
      [
        ['discriminator', s.u8()],
        ['amount', s.u64()],
      ],
      { description: 'AmountToUiAmountInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 23 })
  ) as Serializer<
    AmountToUiAmountInstructionDataArgs,
    AmountToUiAmountInstructionData
  >;
}

// Args.
export type AmountToUiAmountInstructionArgs =
  AmountToUiAmountInstructionDataArgs;

// Instruction.
export function amountToUiAmount(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: AmountToUiAmountInstructionAccounts & AmountToUiAmountInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Mint.
  keys.push({
    pubkey: resolvedAccounts.mint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mint, false),
  });

  // Data.
  const data =
    getAmountToUiAmountInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
