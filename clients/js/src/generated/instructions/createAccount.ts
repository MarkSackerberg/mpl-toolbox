/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ACCOUNT_HEADER_SIZE,
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  SolAmount,
  TransactionBuilder,
  mapAmountSerializer,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type CreateAccountInstructionAccounts = {
  payer?: Signer;
  newAccount: Signer;
};

// Data.
export type CreateAccountInstructionData = {
  discriminator: number;
  lamports: SolAmount;
  space: bigint;
  programId: PublicKey;
};

export type CreateAccountInstructionDataArgs = {
  lamports: SolAmount;
  space: number | bigint;
  programId: PublicKey;
};

export function getCreateAccountInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateAccountInstructionDataArgs, CreateAccountInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateAccountInstructionDataArgs,
    CreateAccountInstructionData,
    CreateAccountInstructionData
  >(
    s.struct<CreateAccountInstructionData>(
      [
        ['discriminator', s.u32()],
        ['lamports', mapAmountSerializer(s.u64(), 'SOL', 9)],
        ['space', s.u64()],
        ['programId', s.publicKey()],
      ],
      { description: 'CreateAccountInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 } as CreateAccountInstructionData)
  ) as Serializer<
    CreateAccountInstructionDataArgs,
    CreateAccountInstructionData
  >;
}

// Args.
export type CreateAccountInstructionArgs = CreateAccountInstructionDataArgs;

// Instruction.
export function createAccount(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: CreateAccountInstructionAccounts & CreateAccountInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // New Account.
  signers.push(resolvedAccounts.newAccount);
  keys.push({
    pubkey: resolvedAccounts.newAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.newAccount, true),
  });

  // Data.
  const data =
    getCreateAccountInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = Number(input.space) + ACCOUNT_HEADER_SIZE;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
