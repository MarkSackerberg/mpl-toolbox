/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  isSigner,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { isWritable } from '../shared';
import {
  AuthorityType,
  AuthorityTypeArgs,
  getAuthorityTypeSerializer,
} from '../types';

// Accounts.
export type SetAuthorityInstructionAccounts = {
  owned: PublicKey;
  owner: PublicKey | Signer;
};

// Data.
export type SetAuthorityInstructionData = {
  discriminator: number;
  authorityType: AuthorityType;
  newAuthority: Option<PublicKey>;
};

export type SetAuthorityInstructionDataArgs = {
  authorityType: AuthorityTypeArgs;
  newAuthority: Option<PublicKey>;
};

export function getSetAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<SetAuthorityInstructionDataArgs, SetAuthorityInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    SetAuthorityInstructionDataArgs,
    SetAuthorityInstructionData,
    SetAuthorityInstructionData
  >(
    s.struct<SetAuthorityInstructionData>(
      [
        ['discriminator', s.u8()],
        ['authorityType', getAuthorityTypeSerializer(context)],
        ['newAuthority', s.option(s.publicKey())],
      ],
      { description: 'SetAuthorityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 6 } as SetAuthorityInstructionData)
  ) as Serializer<SetAuthorityInstructionDataArgs, SetAuthorityInstructionData>;
}

// Args.
export type SetAuthorityInstructionArgs = SetAuthorityInstructionDataArgs;

// Instruction.
export function setAuthority(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: SetAuthorityInstructionAccounts & SetAuthorityInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Owned.
  keys.push({
    pubkey: resolvedAccounts.owned,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.owned, true),
  });

  // Owner.
  if (isSigner(resolvedAccounts.owner)) {
    signers.push(resolvedAccounts.owner);
  }
  keys.push({
    pubkey: publicKey(resolvedAccounts.owner),
    isSigner: isSigner(resolvedAccounts.owner),
    isWritable: isWritable(resolvedAccounts.owner, false),
  });

  // Data.
  const data =
    getSetAuthorityInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
