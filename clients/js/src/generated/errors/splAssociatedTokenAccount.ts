/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@lorisleiva/js-core';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidOwner: 'Associated token account owner does not match address derivation' */
export class InvalidOwnerError extends ProgramError {
  readonly name: string = 'InvalidOwner';
  readonly code: number = 0x0; // 0
  constructor(program: Program, cause?: Error) {
    super(
      'Associated token account owner does not match address derivation',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x0, InvalidOwnerError);
nameToErrorMap.set('InvalidOwner', InvalidOwnerError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getSplAssociatedTokenAccountErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getSplAssociatedTokenAccountErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
