/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@lorisleiva/js-core';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/**
 * IncorrectOwner: 'Account does not have correct owner'
 * @category Errors
 */
class CmIncorrectOwnerError extends ProgramError {
  readonly name: string = 'CmIncorrectOwner';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Account does not have correct owner', program, cause);
  }
}
codeToErrorMap.set(0x1770, CmIncorrectOwnerError);
nameToErrorMap.set('CmIncorrectOwner', CmIncorrectOwnerError);

/**
 * Uninitialized: 'Account is not initialized'
 * @category Errors
 */
class CmUninitializedError extends ProgramError {
  readonly name: string = 'CmUninitialized';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Account is not initialized', program, cause);
  }
}
codeToErrorMap.set(0x1771, CmUninitializedError);
nameToErrorMap.set('CmUninitialized', CmUninitializedError);

/**
 * MintMismatch: 'Mint Mismatch'
 * @category Errors
 */
class MintMismatchError extends ProgramError {
  readonly name: string = 'MintMismatch';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Mint Mismatch', program, cause);
  }
}
codeToErrorMap.set(0x1772, MintMismatchError);
nameToErrorMap.set('MintMismatch', MintMismatchError);

/**
 * IndexGreaterThanLength: 'Index greater than length'
 * @category Errors
 */
class IndexGreaterThanLengthError extends ProgramError {
  readonly name: string = 'IndexGreaterThanLength';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Index greater than length', program, cause);
  }
}
codeToErrorMap.set(0x1773, IndexGreaterThanLengthError);
nameToErrorMap.set('IndexGreaterThanLength', IndexGreaterThanLengthError);

/**
 * NumericalOverflowError: 'Numerical overflow error'
 * @category Errors
 */
class CmNumericalOverflowErrorError extends ProgramError {
  readonly name: string = 'CmNumericalOverflowError';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Numerical overflow error', program, cause);
  }
}
codeToErrorMap.set(0x1774, CmNumericalOverflowErrorError);
nameToErrorMap.set('CmNumericalOverflowError', CmNumericalOverflowErrorError);

/**
 * TooManyCreators: 'Can only provide up to 4 creators to candy machine (because candy machine is one)'
 * @category Errors
 */
class TooManyCreatorsError extends ProgramError {
  readonly name: string = 'TooManyCreators';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super(
      'Can only provide up to 4 creators to candy machine (because candy machine is one)',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1775, TooManyCreatorsError);
nameToErrorMap.set('TooManyCreators', TooManyCreatorsError);

/**
 * CandyMachineEmpty: 'Candy machine is empty'
 * @category Errors
 */
class CmCandyMachineEmptyError extends ProgramError {
  readonly name: string = 'CmCandyMachineEmpty';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Candy machine is empty', program, cause);
  }
}
codeToErrorMap.set(0x1776, CmCandyMachineEmptyError);
nameToErrorMap.set('CmCandyMachineEmpty', CmCandyMachineEmptyError);

/**
 * HiddenSettingsDoNotHaveConfigLines: 'Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order'
 * @category Errors
 */
class HiddenSettingsDoNotHaveConfigLinesError extends ProgramError {
  readonly name: string = 'HiddenSettingsDoNotHaveConfigLines';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super(
      'Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1777, HiddenSettingsDoNotHaveConfigLinesError);
nameToErrorMap.set(
  'HiddenSettingsDoNotHaveConfigLines',
  HiddenSettingsDoNotHaveConfigLinesError
);

/**
 * CannotChangeNumberOfLines: 'Cannot change number of lines unless is a hidden config'
 * @category Errors
 */
class CannotChangeNumberOfLinesError extends ProgramError {
  readonly name: string = 'CannotChangeNumberOfLines';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot change number of lines unless is a hidden config',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1778, CannotChangeNumberOfLinesError);
nameToErrorMap.set('CannotChangeNumberOfLines', CannotChangeNumberOfLinesError);

/**
 * CannotSwitchToHiddenSettings: 'Cannot switch to hidden settings after items available is greater than 0'
 * @category Errors
 */
class CannotSwitchToHiddenSettingsError extends ProgramError {
  readonly name: string = 'CannotSwitchToHiddenSettings';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot switch to hidden settings after items available is greater than 0',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1779, CannotSwitchToHiddenSettingsError);
nameToErrorMap.set(
  'CannotSwitchToHiddenSettings',
  CannotSwitchToHiddenSettingsError
);

/**
 * IncorrectCollectionAuthority: 'Incorrect collection NFT authority'
 * @category Errors
 */
class IncorrectCollectionAuthorityError extends ProgramError {
  readonly name: string = 'IncorrectCollectionAuthority';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Incorrect collection NFT authority', program, cause);
  }
}
codeToErrorMap.set(0x177a, IncorrectCollectionAuthorityError);
nameToErrorMap.set(
  'IncorrectCollectionAuthority',
  IncorrectCollectionAuthorityError
);

/**
 * MetadataAccountMustBeEmpty: 'The metadata account has data in it, and this must be empty to mint a new NFT'
 * @category Errors
 */
class MetadataAccountMustBeEmptyError extends ProgramError {
  readonly name: string = 'MetadataAccountMustBeEmpty';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super(
      'The metadata account has data in it, and this must be empty to mint a new NFT',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x177b, MetadataAccountMustBeEmptyError);
nameToErrorMap.set(
  'MetadataAccountMustBeEmpty',
  MetadataAccountMustBeEmptyError
);

/**
 * NoChangingCollectionDuringMint: 'Can't change collection settings after items have begun to be minted'
 * @category Errors
 */
class NoChangingCollectionDuringMintError extends ProgramError {
  readonly name: string = 'NoChangingCollectionDuringMint';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super(
      "Can't change collection settings after items have begun to be minted",
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x177c, NoChangingCollectionDuringMintError);
nameToErrorMap.set(
  'NoChangingCollectionDuringMint',
  NoChangingCollectionDuringMintError
);

/**
 * ExceededLengthError: 'Value longer than expected maximum value'
 * @category Errors
 */
class ExceededLengthErrorError extends ProgramError {
  readonly name: string = 'ExceededLengthError';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Value longer than expected maximum value', program, cause);
  }
}
codeToErrorMap.set(0x177d, ExceededLengthErrorError);
nameToErrorMap.set('ExceededLengthError', ExceededLengthErrorError);

/**
 * MissingConfigLinesSettings: 'Missing config lines settings'
 * @category Errors
 */
class MissingConfigLinesSettingsError extends ProgramError {
  readonly name: string = 'MissingConfigLinesSettings';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Missing config lines settings', program, cause);
  }
}
codeToErrorMap.set(0x177e, MissingConfigLinesSettingsError);
nameToErrorMap.set(
  'MissingConfigLinesSettings',
  MissingConfigLinesSettingsError
);

/**
 * CannotIncreaseLength: 'Cannot increase the length in config lines settings'
 * @category Errors
 */
class CannotIncreaseLengthError extends ProgramError {
  readonly name: string = 'CannotIncreaseLength';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot increase the length in config lines settings',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x177f, CannotIncreaseLengthError);
nameToErrorMap.set('CannotIncreaseLength', CannotIncreaseLengthError);

/**
 * CannotSwitchFromHiddenSettings: 'Cannot switch from hidden settings'
 * @category Errors
 */
class CannotSwitchFromHiddenSettingsError extends ProgramError {
  readonly name: string = 'CannotSwitchFromHiddenSettings';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Cannot switch from hidden settings', program, cause);
  }
}
codeToErrorMap.set(0x1780, CannotSwitchFromHiddenSettingsError);
nameToErrorMap.set(
  'CannotSwitchFromHiddenSettings',
  CannotSwitchFromHiddenSettingsError
);

/**
 * CannotChangeSequentialIndexGeneration: 'Cannot change sequential index generation after items have begun to be minted'
 * @category Errors
 */
class CannotChangeSequentialIndexGenerationError extends ProgramError {
  readonly name: string = 'CannotChangeSequentialIndexGeneration';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot change sequential index generation after items have begun to be minted',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1781, CannotChangeSequentialIndexGenerationError);
nameToErrorMap.set(
  'CannotChangeSequentialIndexGeneration',
  CannotChangeSequentialIndexGenerationError
);

/**
 * CollectionKeyMismatch: 'Collection public key mismatch'
 * @category Errors
 */
class CmCollectionKeyMismatchError extends ProgramError {
  readonly name: string = 'CmCollectionKeyMismatch';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Collection public key mismatch', program, cause);
  }
}
codeToErrorMap.set(0x1782, CmCollectionKeyMismatchError);
nameToErrorMap.set('CmCollectionKeyMismatch', CmCollectionKeyMismatchError);

/**
 * CouldNotRetrieveConfigLineData: 'Could not retrive config line data'
 * @category Errors
 */
class CouldNotRetrieveConfigLineDataError extends ProgramError {
  readonly name: string = 'CouldNotRetrieveConfigLineData';

  readonly code: number = 0x1783; // 6019

  constructor(program: Program, cause?: Error) {
    super('Could not retrive config line data', program, cause);
  }
}
codeToErrorMap.set(0x1783, CouldNotRetrieveConfigLineDataError);
nameToErrorMap.set(
  'CouldNotRetrieveConfigLineData',
  CouldNotRetrieveConfigLineDataError
);

/**
 * NotFullyLoaded: 'Not all config lines were added to the candy machine'
 * @category Errors
 */
class NotFullyLoadedError extends ProgramError {
  readonly name: string = 'NotFullyLoaded';

  readonly code: number = 0x1784; // 6020

  constructor(program: Program, cause?: Error) {
    super(
      'Not all config lines were added to the candy machine',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1784, NotFullyLoadedError);
nameToErrorMap.set('NotFullyLoaded', NotFullyLoadedError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getCandyMachineCoreErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getCandyMachineCoreErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
