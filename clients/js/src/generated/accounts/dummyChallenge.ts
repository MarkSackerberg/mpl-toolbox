/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@lorisleiva/js-core';

export type DummyChallenge = Account<DummyChallengeAccountData>;

export type DummyChallengeAccountData = { authority: PublicKey };

export async function fetchDummyChallenge(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<DummyChallenge> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'DummyChallenge');
  return deserializeDummyChallenge(context, maybeAccount);
}

export async function safeFetchDummyChallenge(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<DummyChallenge | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeDummyChallenge(context, maybeAccount)
    : null;
}

export async function fetchAllDummyChallenge(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<DummyChallenge[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'DummyChallenge');
    return deserializeDummyChallenge(context, maybeAccount);
  });
}

export async function safeFetchAllDummyChallenge(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<DummyChallenge[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeDummyChallenge(context, maybeAccount as RpcAccount)
    );
}

export function getDummyChallengeGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('mplSystemExtras').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{ authority: PublicKey }>([['authority', s.publicKey]])
    .deserializeUsing<DummyChallenge>((account) =>
      deserializeDummyChallenge(context, account)
    );
}

export function deserializeDummyChallenge(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): DummyChallenge {
  return deserializeAccount(
    rawAccount,
    getDummyChallengeAccountDataSerializer(context)
  );
}

export function getDummyChallengeAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DummyChallengeAccountData> {
  const s = context.serializer;
  return s.struct<DummyChallengeAccountData>(
    [['authority', s.publicKey]],
    'DummyChallenge'
  );
}

export function getDummyChallengeSize(_context = {}): number {
  return 32;
}
