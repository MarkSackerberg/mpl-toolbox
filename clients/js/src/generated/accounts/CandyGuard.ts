/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  mapSerializer,
} from '@lorisleiva/js-core';

export type CandyGuard = Account<CandyGuardAccountData>;

export type CandyGuardAccountData = {
  discriminator: Array<number>;
  base: PublicKey;
  bump: number;
  authority: PublicKey;
};

export type CandyGuardAccountArgs = {
  base: PublicKey;
  bump: number;
  authority: PublicKey;
};

export async function fetchCandyGuard(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<CandyGuard> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'CandyGuard');
  return deserializeCandyGuard(context, maybeAccount);
}

export async function safeFetchCandyGuard(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<CandyGuard | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeCandyGuard(context, maybeAccount)
    : null;
}

export function deserializeCandyGuard(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): CandyGuard {
  return deserializeAccount(
    rawAccount,
    getCandyGuardAccountDataSerializer(context)
  );
}

export function getCandyGuardAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CandyGuardAccountArgs, CandyGuardAccountData> {
  const s = context.serializer;
  return mapSerializer<
    CandyGuardAccountArgs,
    CandyGuardAccountData,
    CandyGuardAccountData
  >(
    s.struct<CandyGuardAccountData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['base', s.publicKey],
        ['bump', s.u8],
        ['authority', s.publicKey],
      ],
      'CandyGuard'
    ),
    (value) =>
      ({
        discriminator: [95, 25, 33, 117, 164, 206, 9, 250],
        ...value,
      } as CandyGuardAccountData)
  ) as Serializer<CandyGuardAccountArgs, CandyGuardAccountData>;
}
