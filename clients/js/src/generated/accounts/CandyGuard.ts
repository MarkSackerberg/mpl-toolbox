/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type CandyGuard = Account<CandyGuardData>;

export type CandyGuardData = {
  base: PublicKey;
  bump: number;
  authority: PublicKey;
};

export async function fetchCandyGuard(
  context: Pick<Context, 'serializer' | 'eddsa' | 'rpc'>,
  address: PublicKey
): Promise<CandyGuard> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'CandyGuard');
  return deserializeCandyGuard(context, maybeAccount);
}

export async function safeFetchCandyGuard(
  context: Pick<Context, 'serializer' | 'eddsa' | 'rpc'>,
  address: PublicKey
): Promise<CandyGuard | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeCandyGuard(context, maybeAccount)
    : null;
}

export function deserializeCandyGuard(
  context: Pick<Context, 'serializer' | 'eddsa'>,
  rawAccount: RpcAccount
): CandyGuard {
  return deserializeAccount(rawAccount, getCandyGuardDataSerializer(context));
}

export function getCandyGuardDataSerializer(
  context: Pick<Context, 'serializer' | 'eddsa'>
): Serializer<CandyGuardData> {
  const s = context.serializer;
  return s.struct<CandyGuardData>(
    [
      ['base', s.publicKey(context)],
      ['bump', s.u8],
      ['authority', s.publicKey(context)],
    ],
    'CandyGuard'
  );
}
