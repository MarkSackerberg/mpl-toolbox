/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type DummyChallenge = Account<DummyChallengeAccountData>;

export type DummyChallengeAccountData = { authority: PublicKey };

export async function fetchDummyChallenge(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<DummyChallenge> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'DummyChallenge');
  return deserializeDummyChallenge(context, maybeAccount);
}

export async function safeFetchDummyChallenge(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<DummyChallenge | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeDummyChallenge(context, maybeAccount)
    : null;
}

export function deserializeDummyChallenge(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): DummyChallenge {
  return deserializeAccount(
    rawAccount,
    getDummyChallengeAccountDataSerializer(context)
  );
}

export function getDummyChallengeAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DummyChallengeAccountData> {
  const s = context.serializer;
  return s.struct<DummyChallengeAccountData>(
    [['authority', s.publicKey]],
    'DummyChallenge'
  );
}
