/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  mapSerializer,
} from '@lorisleiva/js-core';

export type FreezeEscrow = Account<FreezeEscrowAccountData>;

export type FreezeEscrowAccountData = {
  discriminator: Array<number>;
  /** Candy guard address associated with this escrow. */
  candyGuard: PublicKey;
  /** Candy machine address associated with this escrow. */
  candyMachine: PublicKey;
  /** Number of NFTs frozen. */
  frozenCount: bigint;
  /**
   * The timestamp of the first (frozen) mint. This is used to calculate
   * when the freeze period is over.
   */
  firstMintTime: Option<bigint>;
  /**
   * The amount of time (in seconds) for the freeze. The NFTs will be
   * allowed to thaw after this.
   */
  freezePeriod: bigint;
  /** The destination address for the frozed fund to go to. */
  destination: PublicKey;
  /**
   * The authority that initialized the freeze. This will be the only
   * address able to unlock the funds in case the candy guard account is
   * closed.
   */
  authority: PublicKey;
};

export type FreezeEscrowAccountArgs = {
  /** Candy guard address associated with this escrow. */
  candyGuard: PublicKey;
  /** Candy machine address associated with this escrow. */
  candyMachine: PublicKey;
  /** Number of NFTs frozen. */
  frozenCount: number | bigint;
  /**
   * The timestamp of the first (frozen) mint. This is used to calculate
   * when the freeze period is over.
   */
  firstMintTime: Option<number | bigint>;
  /**
   * The amount of time (in seconds) for the freeze. The NFTs will be
   * allowed to thaw after this.
   */
  freezePeriod: number | bigint;
  /** The destination address for the frozed fund to go to. */
  destination: PublicKey;
  /**
   * The authority that initialized the freeze. This will be the only
   * address able to unlock the funds in case the candy guard account is
   * closed.
   */
  authority: PublicKey;
};

export async function fetchFreezeEscrow(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<FreezeEscrow> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'FreezeEscrow');
  return deserializeFreezeEscrow(context, maybeAccount);
}

export async function safeFetchFreezeEscrow(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<FreezeEscrow | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeFreezeEscrow(context, maybeAccount)
    : null;
}

export function deserializeFreezeEscrow(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): FreezeEscrow {
  return deserializeAccount(
    rawAccount,
    getFreezeEscrowAccountDataSerializer(context)
  );
}

export function getFreezeEscrowAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<FreezeEscrowAccountArgs, FreezeEscrowAccountData> {
  const s = context.serializer;
  return mapSerializer<
    FreezeEscrowAccountArgs,
    FreezeEscrowAccountData,
    FreezeEscrowAccountData
  >(
    s.struct<FreezeEscrowAccountData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['candyGuard', s.publicKey],
        ['candyMachine', s.publicKey],
        ['frozenCount', s.u64],
        ['firstMintTime', s.option(s.i64)],
        ['freezePeriod', s.i64],
        ['destination', s.publicKey],
        ['authority', s.publicKey],
      ],
      'FreezeEscrow'
    ),
    (value) =>
      ({
        discriminator: [100, 4, 61, 102, 0, 123, 141, 187],
        ...value,
      } as FreezeEscrowAccountData)
  ) as Serializer<FreezeEscrowAccountArgs, FreezeEscrowAccountData>;
}
