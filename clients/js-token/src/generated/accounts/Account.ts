/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';
import { AccountState, getAccountStateSerializer } from '../types';

export type Account = Account<AccountAccountData>;

export type AccountAccountData = {
  mint: PublicKey;
  owner: PublicKey;
  amount: bigint;
  delegate: Option<PublicKey>;
  state: AccountState;
  isNative: Option<bigint>;
  delegatedAmount: bigint;
  closeAuthority: Option<PublicKey>;
};

export type AccountAccountArgs = {
  mint: PublicKey;
  owner: PublicKey;
  amount: number | bigint;
  delegate: Option<PublicKey>;
  state: AccountState;
  isNative: Option<number | bigint>;
  delegatedAmount: number | bigint;
  closeAuthority: Option<PublicKey>;
};

export async function fetchAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'Account');
  return deserializeAccount(context, maybeAccount);
}

export async function safeFetchAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists ? deserializeAccount(context, maybeAccount) : null;
}

export function deserializeAccount(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account {
  return deserializeAccount(
    rawAccount,
    getAccountAccountDataSerializer(context)
  );
}

export function getAccountAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AccountAccountArgs, AccountAccountData> {
  const s = context.serializer;
  return s.struct<AccountAccountData>(
    [
      ['mint', s.publicKey],
      ['owner', s.publicKey],
      ['amount', s.u64],
      ['delegate', s.option(s.publicKey)],
      ['state', getAccountStateSerializer(context)],
      ['isNative', s.option(s.u64)],
      ['delegatedAmount', s.u64],
      ['closeAuthority', s.option(s.publicKey)],
    ],
    'Account'
  ) as Serializer<AccountAccountArgs, AccountAccountData>;
}
