/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
} from '@lorisleiva/js-core';

// Accounts.
export type InitializeAccount3InstructionAccounts = {
  account: PublicKey;
  mint: PublicKey;
};

// Arguments.
export type InitializeAccount3InstructionData = { owner: PublicKey };

export function getInitializeAccount3InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitializeAccount3InstructionData> {
  const s = context.serializer;
  return s.struct<InitializeAccount3InstructionData>(
    [['owner', s.publicKey]],
    'initializeAccount3InstructionArgs'
  );
}

// Instruction.
export function initializeAccount3(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: InitializeAccount3InstructionAccounts &
    InitializeAccount3InstructionData
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Account.
  keys.push({ pubkey: input.account, isSigner: false, isWritable: true });

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: false });

  // Data.
  const data =
    getInitializeAccount3InstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
