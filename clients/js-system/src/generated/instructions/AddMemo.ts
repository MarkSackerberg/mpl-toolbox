/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Arguments.
export type AddMemoInstructionData = {
  discriminator: Array<number>;
  memo: string;
};

export type AddMemoInstructionArgs = { memo: string };

export function getAddMemoInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AddMemoInstructionArgs, AddMemoInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    AddMemoInstructionArgs,
    AddMemoInstructionData,
    AddMemoInstructionData
  >(
    s.struct<AddMemoInstructionData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['memo', s.string],
      ],
      'addMemoInstructionArgs'
    ),
    (value) =>
      ({
        discriminator: [236, 93, 108, 158, 70, 109, 204, 167],
        ...value,
      } as AddMemoInstructionData)
  ) as Serializer<AddMemoInstructionArgs, AddMemoInstructionData>;
}

// Instruction.
export function addMemo(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: AddMemoInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splMemo',
    'Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo'
  );

  // Data.
  const data = getAddMemoInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
