/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Amount,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapAmountSerializer,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type CreateAccountInstructionAccounts = {
  payer: Signer;
  newAccount: Signer;
};

// Arguments.
export type CreateAccountInstructionData = {
  discriminator: number;
  lamports: Amount<'SOL', 9>;
  space: bigint;
  programId: PublicKey;
};

export type CreateAccountInstructionArgs = {
  lamports: Amount<'SOL', 9>;
  space: number | bigint;
  programId: PublicKey;
};

export function getCreateAccountInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateAccountInstructionArgs, CreateAccountInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateAccountInstructionArgs,
    CreateAccountInstructionData,
    CreateAccountInstructionData
  >(
    s.struct<CreateAccountInstructionData>(
      [
        ['discriminator', s.u32],
        ['lamports', mapAmountSerializer(s.u64, 'SOL', 9)],
        ['space', s.u64],
        ['programId', s.publicKey],
      ],
      'createAccountInstructionArgs'
    ),
    (value) => ({ discriminator: 0, ...value } as CreateAccountInstructionData)
  ) as Serializer<CreateAccountInstructionArgs, CreateAccountInstructionData>;
}

// Instruction.
export function createAccount(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: CreateAccountInstructionAccounts & CreateAccountInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'splSystem',
    '11111111111111111111111111111111'
  );

  // Payer.
  signers.push(input.payer);
  keys.push({
    pubkey: input.payer.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // New Account.
  signers.push(input.newAccount);
  keys.push({
    pubkey: input.newAccount.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data =
    getCreateAccountInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
