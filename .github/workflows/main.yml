name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CACHE: true

jobs:
  build_programs:
    name: Build programs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        program: ["system-extras", "token-extras"]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          version: ${{ vars.RUST_VERSION }}

      - name: Install Solana
        uses: ./.github/actions/install-solana
        with:
          version: ${{ vars.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache program dependencies
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./programs/${{ matrix.program }}/target/
          key: ${{ runner.os }}-program-${{ matrix.program }}-${{ hashFiles(format('./programs/{0}/Cargo.lock', matrix.program)) }}
          restore-keys: |
            ${{ runner.os }}-program-${{ matrix.program }}

      - name: Build program
        working-directory: ./programs/${{ matrix.program }}
        run: cargo build-bpf

      - name: Upload program builds
        uses: actions/upload-artifact@v3
        with:
          name: program-builds
          # First wildcard ensures exported paths are consistently under the programs folder.
          path: ./program*/**/target/deploy/*.so
          if-no-files-found: error

  test_programs:
    name: Test and lint programs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        program: ["system-extras", "token-extras"]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          version: ${{ vars.RUST_VERSION }}

      - name: Install Solana
        uses: ./.github/actions/install-solana
        with:
          version: ${{ vars.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache program dev dependencies
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./programs/${{ matrix.program }}/target/
          key: ${{ runner.os }}-program-${{ matrix.program }}-dev-${{ hashFiles(format('./programs/{0}/Cargo.lock', matrix.program)) }}
          restore-keys: |
            ${{ runner.os }}-program-${{ matrix.program }}-dev
            ${{ runner.os }}-program-${{ matrix.program }}-${{ hashFiles(format('./programs/{0}/Cargo.lock', matrix.program)) }}
            ${{ runner.os }}-program-${{ matrix.program }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ./programs/${{ matrix.program }}/Cargo.toml -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features --no-deps --manifest-path ./programs/${{ matrix.program }}/Cargo.toml

      - name: Run tests
        working-directory: ./programs/${{ matrix.program }}
        run: cargo test-bpf

  generate_clients:
    name: Generate clients
    runs-on: ubuntu-latest
    needs: [build_programs]
    permissions:
      contents: write
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: DEBUG
        run: |
          echo "FOO=${{ vars.FOO }}"
          echo "SOLANA_VERSION=${{ vars.SOLANA_VERSION }}"

      - name: Install Node.js
        uses: ./.github/actions/install-node
        with:
          version: ${{ vars.NODE_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache IDL generators
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: ./.crates/
          key: ${{ runner.os }}-idl-generators-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-idl-generators

      - name: Generate IDLs and clients
        run: pnpm generate

      - name: Commit generated clients
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update generated clients

  verify_js:
    name: Verify JS client
    needs: [generate_clients]
    uses: ./.github/workflows/verify-js.yml
    secrets: inherit
    with:
      solana: ${{ vars.SOLANA_VERSION }}
      node: ${{ vars.NODE_VERSION }}
      cache: ${{ env.CACHE }}
