name: Deploy JS Client

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "The severity of the version bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: "Create a GitHub release after publishing"
        required: true
        type: boolean
        default: true

env:
  RUST_VERSION: 1.65.0
  SOLANA_VERSION: 1.13.6
  NODE_VERSION: 16.x
  CARGO_TERM_COLOR: always
  CACHE: true

jobs:
  build_programs:
    name: Build programs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        program: ["system-extras", "token-extras"]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          version: ${{ env.RUST_VERSION }}

      - name: Install Solana
        uses: ./.github/actions/install-solana
        with:
          version: ${{ env.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache program dependencies
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./programs/${{ matrix.program }}/target/
          key: ${{ runner.os }}-program-${{ matrix.program }}-${{ hashFiles(format('./programs/{0}/Cargo.lock', matrix.program)) }}
          restore-keys: |
            ${{ runner.os }}-program-${{ matrix.program }}

      - name: Build program
        working-directory: ./programs/${{ matrix.program }}
        run: cargo build-bpf

      - name: Upload program builds
        uses: actions/upload-artifact@v3
        with:
          name: program-builds
          # First wildcard ensures exported paths are consistently under the programs folder.
          path: ./program*/**/target/deploy/*.so
          if-no-files-found: error

  test_js:
    name: Test JS client
    runs-on: ubuntu-latest
    needs: [build_programs]
    strategy:
      matrix:
        node: ["16.x", "18.x"]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Start validator
        uses: ./.github/actions/start-validator
        with:
          node: ${{ matrix.node }}
          solana: ${{ env.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache JS client dependencies
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: ./clients/js/node_modules/
          key: ${{ runner.os }}-clients-js-${{ hashFiles('./clients/js/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-clients-js

      - name: Install JS client dependencies
        working-directory: ./clients/js
        run: pnpm install --frozen-lockfile

      - name: Build JS client
        working-directory: ./clients/js
        run: pnpm build

      - name: Test JS client
        working-directory: ./clients/js
        run: pnpm test

  lint_js:
    name: Lint JS client
    runs-on: ubuntu-latest
    needs: [build_programs]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: ./.github/actions/install-node
        with:
          version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache JS client dependencies
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: ./clients/js/node_modules/
          key: ${{ runner.os }}-clients-js-${{ hashFiles('./clients/js/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-clients-js

      - name: Install JS client dependencies
        working-directory: ./clients/js
        run: pnpm install --frozen-lockfile

      - name: Format JS client
        working-directory: ./clients/js
        run: pnpm format

      - name: Lint JS client
        working-directory: ./clients/js
        run: pnpm lint

  deploy_js:
    name: Deploy JS client
    runs-on: ubuntu-latest
    needs: [test_js, lint_js]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: ./.github/actions/install-node
        with:
          version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Cache JS client dependencies
        if: env.CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: ./clients/js/node_modules/
          key: ${{ runner.os }}-clients-js-${{ hashFiles('./clients/js/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-clients-js

      - name: Install JS client dependencies
        working-directory: ./clients/js
        run: pnpm install --frozen-lockfile

      - name: Build JS client
        working-directory: ./clients/js
        run: pnpm build

      - name: Bump JS client
        working-directory: ./clients/js
        run: pnpm version ${{ github.event.inputs.bump }} --no-git-tag-version

      - name: Debug
        working-directory: ./clients/js
        run: git diff

      # TODO: Commit new version
      # TODO: Publish JS client
      # TODO: Create GitHub release
